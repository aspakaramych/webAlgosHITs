import {
    PriorityQueue
} from './PriorityQueue.js'

document.getElementById("generate").addEventListener("click", getGrid);
document.getElementById("start").addEventListener("click", AstarAlgo);
document.getElementById("step").addEventListener("click", showAlgorhytm);
document.getElementById("showBySteps").addEventListener("click", showBySteps);

let paintedCells = [];
let pathCells = [];
let mainCells = [];
let size;
let grid;
let userStep = 0;

// –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–µ (–≤—Å–µ –∫–ª–µ—Ç–∫–∏ –∑–∞–∫—Ä–∞—à–µ–Ω—ã - —ç—Ç–æ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ü—Ä–∏–º–∞)
function getGrid() {
    clear();
    paintedCells = [];
    mainCells = [];
    pathCells = [];
    grid = document.getElementById('grid');
    size = parseInt(document.getElementById('size').value);
    document.documentElement.style.setProperty('--size', size);

    grid.innerHTML= '';

    for (let i = 0; i < size * size; i++) {

        let cell = document.createElement('div'); // "–∫–ª–µ—Ç–∫–∞" –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π div, –≤ –∫–æ—Ç–æ—Ä—ã–π –º—ã –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã "üëç"
        cell.classList.add('cell');
        cell.classList.add('wall')

        const row = Math.floor(i / size); 
        const col = i % size;
        paintedCells.push({ row, col });

        cell.addEventListener('click', function() { // –ª–∫–º - —Å—Ç–∞–≤–∏–º/—É–±–∏—Ä–∞–µ–º —Å—Ç–µ–Ω—É
            cell.classList.toggle('wall');

            if (cell.classList.contains('wall')) {
                paintedCells.push({ row, col });
            } else {
                const index = paintedCells.findIndex(cell => cell.row === row && cell.col === col);
                if (index > -1) {
                    paintedCells.splice(index, 1);
                }
            }
        });
        
        cell.addEventListener('contextmenu', function() { // –Ω–∞ –ø–∫–º —Å—Ç–∞–≤–∏–º/—É–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é/–∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É
            cell.classList.toggle('main');

            if(cell.classList.contains('wall')) {         // –µ—Å–ª–∏ —Ç–∞–º –±—ã–ª–∞ —Å—Ç–µ–Ω–∞ - —É–±–∏—Ä–∞–µ–º
                cell.classList.remove('wall');
                const index = paintedCells.findIndex(cell => cell.row === row && cell.col === col);
                if (index > -1) {
                    paintedCells.splice(index, 1);
                }
            }

            if(cell.classList.contains('main')) {
                if(mainCells.length < 2) {                 // –µ—Å–ª–∏ "–≥–ª–∞–≤–Ω—ã—Ö" —Ç–æ—á–µ–∫ <= 2 - –≤—Å—ë –æ–∫, –∏–Ω–∞—á–µ - –≤—ã–¥–∞—ë–º –æ—à–∏–±–∫—É
                    mainCells.push({row, col});
                    document.getElementById("error").textContent = "";
                } else {
                    cell.classList.toggle('main');
                    document.getElementById("error").textContent = "–ì–ª–∞–≤–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–µ - –Ω–∞—á–∞–ª—å–Ω–∞—è –∏ –∫–æ–Ω–µ—á–Ω–∞—è";
                }
            } else {
                const index = mainCells.findIndex(cell => cell.row === row && cell.col === col);
                if (index > -1) {
                    mainCells.splice(index);
                }
            }
        });
        
        grid.appendChild(cell);
    }
    PrimAlgorhitm(); // –∞–ª–≥–æ—Ä–∏—Ç–º –ü—Ä–∏–º–∞ —Ä–∞—Å—á–∏–∞—â–∞–µ—Ç –∫–ª–µ—Ç–∫–∏-—Å—Ç–µ–Ω—ã
}

let graph = new Map();

function fillTheGraph() {       
    graph.clear();
    for(let i = 0; i < size; i++) {
        for(let j = 0; j < size; j++) {
            if(!paintedCells.some(cell => cell.row === i && cell.col === j)) {  // –¥–ª—è –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏-–Ω–µ-—Å—Ç–µ–Ω—ã –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å–µ–¥–µ–π
                graph.set(`${i},${j}`, getNeighbors(i, j));
            }
        }
    }
}

function getNeighbors(x, y) {   // —Å–æ—Å–µ–¥–∏ —Å–ª–µ–≤–∞-—Å–Ω–∏–∑—É-—Å–ø—Ä–∞–≤–∞-—Å–≤–µ—Ä—Ö—É
    let neigh = [];
    if(!paintedCells.some(cell => cell.row === x+1 && cell.col === y) && x+1 < size) {
        neigh.push({row: x+1, col: y});
    }
    if(!paintedCells.some(cell => cell.row === x && cell.col === y+1) && y+1 < size) {
        neigh.push({row: x, col: y+1});
    }
    if(!paintedCells.some(cell => cell.row === x-1 && cell.col === y) && x-1 >= 0) {
        neigh.push({row: x-1, col: y});
    }
    if(!paintedCells.some(cell => cell.row === x && cell.col === y-1) && y-1 >= 0) {
        neigh.push({row: x, col: y-1});
    }
    return neigh;
}

function evrEval(a , b) {   // —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ - –º–µ—Ç—Ä–∏–∫–∞ –ú–∞–Ω—Ö–µ—Ç—Ç–µ–Ω–∞ - –æ—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏
    return Math.abs(a.row - b.row) + Math.abs(a.col - b.col);
}

let path = new Map();       // –∫–ª–µ—Ç–∫–∏ –∏—Å–∫–æ–º–æ–≥–æ –ø—É—Ç–∏
let finalPath = [];         // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–µ—Ç–æ–∫ –∏—Å–∫–æ–º–æ–≥–æ –ø—É—Ç–∏
let choosed = [];           // –∫–∞–∫–∞—è –∫–ª–µ—Ç–∫–∞ –≤—ã–±–∏—Ä–∞–ª–∞—Å—å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
let find = new Map();       // –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ - –≤—ã–±–æ—Ä –º–µ–∂–¥—É –∫–∞–∫–∏–º–∏ —Ç–æ—á–∫–∞–º–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª –Ω–∞ –¥–∞–Ω–Ω–æ–º —à–∞–≥–µ

function AstarAlgo() {
    if(mainCells.length < 2) {
        document.getElementById("error").textContent = "–ì–ª–∞–≤–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–µ - –Ω–∞—á–∞–ª—å–Ω–∞—è –∏ –∫–æ–Ω–µ—á–Ω–∞—è";
        return;
    }
    clear();
    fillTheGraph();

    let borders = new PriorityQueue();

    let start = mainCells[0];
    let goal = mainCells[1];
    let step = 0;
    let reached = false;
    let visited = [];

    path.set(`${start.row},${start.col}`, 0);    
    borders.add(start, 0);

    while(!borders.isEmpty()) {
        let curr = borders.peek();
        borders.pop();
        choosed[step] = curr;

        if(curr.row === goal.row && curr.col === goal.col) {
            reached = true;
            break;
        }
        let currFind = [];
        for(let next of graph.get(`${curr.row},${curr.col}`)) {
            if(!visited[`${next.row},${next.col}`]) {
                borders.add(next, evrEval(goal, next));
                path.set(`${next.row},${next.col}`, curr);
                visited[`${next.row},${next.col}`] = true;
                currFind.push(next);
            }
        }
        find.set(step, currFind);
        step++;
    }

    if(reached) {
        getPath();  
    } else {
        document.getElementById("error").textContent = "–ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
    }
}

function getPath() {
    let curr = mainCells[1];
    curr = path.get(`${curr.row},${curr.col}`); 
    while(curr != mainCells[0]) {
        finalPath.push(`${curr.row},${curr.col}`);
        grid.children[curr.row * size + curr.col].classList.toggle('path');
        curr = path.get(`${curr.row},${curr.col}`); 
    }
}

function isNear(x1, y1, x2, y2) {
    return ((Math.abs(x1 - x2) <= 1 && Math.abs(y1 - y2) <= 1) && !(Math.abs(x1 - x2) == 1 && Math.abs(y1 - y2) == 1));
}

async function showAlgorhytm() {
    if(path.size == 0) {
        AstarAlgo();
        AstarAlgo();
    }
    if(userStep > 0) {
        if(userStep >= find.size) {
            return;
        }
        grid.children[choosed[userStep-1].row * size + choosed[userStep-1].col].classList.remove('curr');  // —Å–Ω–∏–º–∞–µ–º –ø–æ–ª–Ω–æ–º–æ—á–∏—è –ª–∏–¥–∏—Ä—É—é—â–µ–π –∫–ª–µ—Ç–∫–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π
        grid.children[choosed[userStep - 1].row * size + choosed[userStep - 1].col].classList.add('show'); // —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ (—ç—Ç–æ
        for(let i of find.get(userStep-1)) {                                                               // –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏)
            grid.children[i.row * size + i.col].classList.remove('mark'); // –ø–æ–º–µ—á–∞–µ–º —Ç–æ—á–∫–∏, –º–µ–∂–¥—É –≥–æ—Ç–æ—Ä—ã–º–∏ –ø—Ä–æ–∏—Å—Ö–æ–∂–∏—Ç –≤—ã–±–æ—Ä
        }
        // –µ—Å–ª–∏ –ø—Ä–æ—à–ª–∞—è –∫–ª–µ—Ç–∫–∞ –Ω–µ —Ä—è–¥–æ–º —Å —Ç–µ–∫—É—â–µ–π - –æ–Ω–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç—É–ø–∏–∫–æ–º, –∏–ª–∏ "–Ω–µ–≤—ã–≥–æ–¥–Ω–æ–π —Ç–æ—á–∫–µ –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥—É" - 
        // –º–æ–∂–µ—Ç –±—ã—Ç—å, –∫ –Ω–µ–π –µ—â—ë –≤–µ—Ä–Ω—ë–º—Å—è
        if(!isNear(choosed[userStep - 1].row, choosed[userStep - 1].col, choosed[userStep].row, choosed[userStep].col) && !finalPath.find(el => el ==`${choosed[userStep - 1].row},${choosed[userStep - 1].col}`)) {
            grid.children[choosed[userStep-1].row * size + choosed[userStep-1].col].classList.add('deadlock');
        }
    }
    grid.children[choosed[userStep].row * size + choosed[userStep].col].classList.add('curr'); // –∫–ª–µ—Ç–∫–∞ - –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π

    for(let i of find.get(userStep)) {
        grid.children[i.row * size + i.col].classList.add('mark');
    }
    userStep++;
}

function clear() {
    path.clear();
    choosed = [];
    find.clear();
    finalPath = [];
}

async function showBySteps() {
    let delay = document.getElementById("inputDelay").value;
    userStep = 0;
    if(path.size == 0) {
        AstarAlgo();
        AstarAlgo();
    }

    while(userStep < find.size) {
        await new Promise(resolve => {      // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É 
            setTimeout(() => {              // await –∂–¥—ë—Ç –≤—ã–∑–æ–≤–∞ resolve() 
                showAlgorhytm();        
                resolve();
            }, delay);
        });
    }
}

function PrimAlgorhitm() {
    let startRow = Math.floor(Math.random() * size);
    let startCol = Math.floor(Math.random() * size);
    let queue = [];
    queue.push({row: startRow, col: startCol});
    
    pathCells.push({row: startRow, col: startCol});
    grid.children[startRow * size + startCol].classList.remove('wall');
    paintedCells.splice(paintedCells.findIndex(cell => cell.row === startRow && cell.col === startCol), 1);


    while(queue.length > 0) {
        let current = queue.splice(Math.floor(Math.random() * queue.length), 1)[0];
        let directions = [
            [2,0],
            [0,2],
            [-2,0],
            [0,-2]
        ];

        for(let dir of directions) {
            if(current.row + dir[0] >= 0 && current.row + dir[0] < size && current.col + dir[1] >= 0 && current.col + dir[1] < size) {
                if(!pathCells.some(cell => cell.row === current.row + dir[0] && cell.col === current.col + dir[1])) {
                    
                    grid.children[(current.row + dir[0]) * size + current.col + dir[1]].classList.remove('wall');
                    grid.children[(current.row + dir[0]/2) * size + current.col + dir[1]/2].classList.remove('wall');

                    paintedCells.splice(paintedCells.findIndex(cell => cell.row === current.row + dir[0] && cell.col === current.col + dir[1]), 1);
                    paintedCells.splice(paintedCells.findIndex(cell => cell.row === current.row + dir[0]/2 && cell.col === current.col + dir[1]/2), 1);

                    pathCells.push({row: current.row + dir[0], col: current.col + dir[1]});
                    pathCells.push({row: current.row + dir[0]/2, col: current.col + dir[1]/2});

                    queue.push({row: current.row + dir[0], col: current.col + dir[1]});
                }
            }
        }
    }
}
